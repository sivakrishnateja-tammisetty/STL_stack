Basic features of stack:
1.It follows LIFO.
2.It is an ordered list of similar datatypes.
3.overflow(completely full) & underflow(completely empty).
OPERATIONS:
Push,pop,top,empty,size
TIME COMPLEXITY: for all operations is O(1)




//GIVEN A STRING< REVERSE IT USING STACK
#include<bits/stdc++.h>
using namespace std;

int main()
{
string name="Teja";
cout<<"Given string is :"<<name<<endl;
stack<char>st;
for(auto c:name)
{
    st.push(c);
}
int n=name.length();
for(int i=0;i<n;i++)
{
    name[i]=st.top();
    st.pop();
}
cout<<"The reversed string using stack is:"<<name<<endl;
return 0;}


//REVERSE GIVEN NUMBER USING STACK
#include<bits/stdc++.h>
using namespace std;
int main() {
    stack<int>st;
    int n=123;
    int d;
    while(n!=0)
    {
         d=n%10;
        st.push(d);
        n/=10;
    }
    int rev_num=0;
    int multipler=1;
    while(!st.empty())
    {
        int d=st.top();
        rev_num+=d*multipler;
        st.pop();
        multipler*=10;
        
    }
    cout<<"Reverse number is :"<<rev_num<<endl;
    return 0;
}


//REMOVE ALL ADJACENT DUPLICATES
#include<bits/stdc++.h>
using namespace std;
int main() {
    string s="abbaca";
    stack<char>stack1;
    
    for(char ch:s){
         if(!stack1.empty() && stack1.top()==ch)
         {
            stack1.pop();
         }
         else
         {
            stack1.push(ch);
         }
    }
    stack<char>stack2;
    
    string ans="";
    char c;
    while(!stack1.empty())
    {
        c=stack1.top();
        stack2.push(c);
        stack1.pop();
    }
    while(!stack2.empty())
    {
        ans+=stack2.top();
        stack2.pop();
    }
    cout<<"Expected outcome is: "<<ans;
    return 0;
}
